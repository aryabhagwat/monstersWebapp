{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","Cardlist","monsters","map","Searchbox","placeholder","handleChange","type","onChange","App","state","searchfield","fetch","then","result","json","users","setState","e","this","target","value","filteredmonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAIcA,EAAO,SAACC,GAAD,OACjB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACtB,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,YCJKC,EAAW,SAACR,GACxB,OAAO,qBAAKC,UAAU,YAAf,SACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHdM,G,MAAY,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,YAAYC,EAAkB,EAAlBA,aACpC,OAAO,uBAAOC,KAAK,SACZF,YAAaA,EACbG,SAAUF,MCqCLG,E,kDAnCb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXR,SAAU,GACVS,YAAa,IAJH,E,qDAOd,WAAqB,IAAD,OAClBC,MAAM,8CACHC,MAAK,SAAAC,GAAM,OAAIA,EAAOC,UACtBF,MAAK,SAAAG,GAAK,OAAI,EAAKC,SAAS,CAAEf,SAAUc,S,0BAI7C,SAAaE,GACXC,KAAKF,SAAS,CAAEN,YAAaO,EAAEE,OAAOC,U,oBAGxC,WACE,MAAgCF,KAAKT,MAA9BR,EAAP,EAAOA,SAAUS,EAAjB,EAAiBA,YAEXW,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAAIA,EAAQE,KAAKyB,cAAcC,SAASd,MAExF,OACE,sBAAKjB,UAAU,MAAf,UACE,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAca,KAAKb,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BVI,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhB,MAAK,YAAkD,IAA/CiB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.9fe96a11.chunk.js","sourcesContent":["import React from 'react';\r\nimport './card.styles.css'\r\n\r\n\r\nexport const  Card = (props) => (\r\n    <div className='card-container'>\r\n        <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=160x160`} />\r\n        <h1> {props.monster.name} </h1>\r\n        <p> {props.monster.email}  </p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css'\r\nimport { Card } from '../card/card.component.jsx';\r\n\r\nexport const Cardlist = (props) => {\r\n return <div className='card-list'>\r\n    {props.monsters.map(monster => (\r\n        <Card key={monster.id} monster={monster} />))}\r\n    </div>\r\n}","import React from 'react';\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const Searchbox = ({placeholder,handleChange}) => {\r\n   return <input type='search'\r\n          placeholder={placeholder}\r\n          onChange={handleChange}>\r\n    </input>\r\n}","\nimport './App.css';\nimport { Component } from 'react';\n\nimport { Cardlist } from './components/card-list/card-list.component';\nimport { Searchbox } from './components/search-box/search-box.component';\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchfield: ''\n    }\n  }\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(result => result.json())\n      .then(users => this.setState({ monsters: users }));\n\n  }\n\n  handleChange(e) {\n    this.setState({ searchfield: e.target.value } )\n  }\n\n  render() {\n    const {monsters, searchfield} = this.state;\n\n    const filteredmonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchfield));\n\n    return (\n      <div className=\"App\">\n        <Searchbox\n          placeholder='search monsters'\n          handleChange={this.handleChange}/>\n        \n        <Cardlist monsters={filteredmonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}